introspection: https://graphql-pokemon2.vercel.app
servers:
  - url: https://graphql-pokemon2.vercel.app
    description: Test Server
config:
  # Use example values instead of property types when generating example queries and variables generation
  useExamples: true
info:
  description: |
    Welcome to the sample Pokémon API reference. This is a live example of how you can use [DociQL](https://github.com/wayfair/dociql) in conjunction with [GraphQL](https://graphql.org/) to generate beautiful static documentation for your own APIs.

    The Pokémon API is GraphQL API. It's schema can be fetched using introspection query and can be used for generating code, documentations, tests etc.

    GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.
  version: 1.0.0
  title: Pokémon API
  termsOfService: 'https://graphql-pokemon2.vercel.app/terms'
  contact:
    email: dmiasoutov@wayfair.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

sections:
  - name: Authentication
    description: |
      Authentication for registries is handled client side. The client has to send authentication details. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:

      ```
      {
        "username": "string",
        "password": "string",
        "email": "string",
        "serveraddress": "string"
      }
      ```

      The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.

    example: |
      Here a code example

      ```
      {
        "identitytoken": "9cbaf023786cd7..."
      }
      ```
  - name: Versioning
    description: |
      The API is usually changed in each release, so API calls are versioned to ensure that clients don't break.

      The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.

      Silly table c1  | c2 |
      ----------------|-------------
      1.12.x | 1.24
      1.11.x | 1.23
      1.10.x | 1.22

domains:
  - name: Fetching Pokémons
    description: Base methods to fetch pokemon information.
    usecases:
     - name: Fetch Pokémons
       description: Query list of Pokémon
       query: query.pokemons
       expand: weight,height       
     - name: Fetch single Pokémon
       description: Query any Pokémon by number or name
       query: query.pokemon
       expand: weight,height
  - name: Evolution & Attacks
    description: Custom methods to fetch pokemon
    usecases:
     - name: Query Attack Rating
       description: Query Pokémon
       query: query.pokemon       
       select: id name
       expand: attacks,fast,special
     - name: Query Evolutions
       description: Query Pokémon evolutions
       query: query.pokemon
       select: id name
       expand: evolutions
errorSection:
  description: "Description example of the error catalogue section"
  errorCatalogue:
    - name: UNAUTHENTICATED
      messages:
        - message: Invalid credentials
          description: The token is not a valid JWT.
        - message: Missing credentials
          description: The token was not found in the Authorization header.
        - message: Invalid user
          description: The user id is not defined within the token payload.
    - name: BAD_USER_INPUT
      messages:
        - message: The user e-mail is not valid
          description: User invalid e-mail address.
    - name: USER_NOT_FOUND
      messages:
        - message: Unknown error
          description: UNKNOWN_ERROR
    - name: SERVICE_TEMPORARILY_UNAVAILABLE
      messages:
        - message: Service temporarily unavailable
          description: The PaaS platform has problems.

# securityDefinitions:
#   cheesy_auth:
#     type: oauth2
#     authorizationUrl: 'http://cheesy.sourcey.com/api/oauth/dialog'
#     description: Provides OAuth access to the cheese
#     flow: implicit
#     scopes:
#       'write:cheeses': Modify cheeses in your account
#       'read:cheeses': Read your cheeses
#   api_key:
#     type: apiKey
#     name: api_key
#     description: Provides API Key access to the cheese
#     in: header
# externalDocs:
#   description: Find out more about Swagger
#   url: 'http://swagger.io'
